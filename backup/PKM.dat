{"_id":"5a19281ec360b50aa346d0bb","question":"Js 基本数据类型都有哪些？","answer":"\u003cp\u003e数字，字符串，布尔值，null，undefined，对象, symbol\u0026nbsp;(new to ES6)\u003c/p\u003e","tags":["javascript"]}
{"_id":{"$oid":"5a1e7bcc752d975945645811"},"question":"强制转换和隐式转换？","answer":"\u003cpre class=\"ql-syntax\" spellcheck=\"false\"\u003evar a = “12”;\nvar b = Number(a).; \u0009// 强制转换\nb = a * 1; \u0009\u0009// 隐式转换\n\u003c/pre\u003e","tags":[]}
{"_id":{"$oid":"5a1e7c0f752d975945645812"},"question":"== 和 === 的区别？","answer":"\u003cp\u003e一半来说可以说 == 比较值，=== 比较值和类型\u003c/p\u003e\u003cp\u003e更严格讲 == 比较转换后的值， === 不可转换比较的值\u003c/p\u003e","tags":[]}
{"_id":{"$oid":"5a1f60da752d975945645813"},"question":"== 和 === 使用场景是什么？","answer":"\u003cul\u003e\u003cli\u003eIf either value (aka side) in a comparison could be the\u0026nbsp;true\u0026nbsp;or\u0026nbsp;false\u0026nbsp;value, avoid\u0026nbsp;==\u0026nbsp;and use\u0026nbsp;===.\u003c/li\u003e\u003cli\u003eIf either value in a comparison could be of these specific values (0,\u0026nbsp;\"\", or\u0026nbsp;[]\u0026nbsp;-- empty array), avoid\u0026nbsp;==\u0026nbsp;and use\u0026nbsp;===.\u003c/li\u003e\u003cli\u003eIn\u0026nbsp;\u003cem\u003eall\u003c/em\u003e\u0026nbsp;other cases, you're safe to use\u0026nbsp;==. Not only is it safe, but in many cases it simplifies your code in a way that improves readability.\u003c/li\u003e\u003c/ul\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e","tags":[]}
{"_id":{"$oid":"5a1f612b752d975945645814"},"question":"var a = [1,2,3]; var b = \"1,2,3\"; a == b 时转换规则","answer":"\u003cp\u003ea转换成 用 ‘,’ 链接的字符串\u003c/p\u003e","tags":[]}
{"_id":{"$oid":"5a1f614f752d975945645815"},"question":"== 在比较 数组，函数，对象时，比较的是值还是引用","answer":"\u003cp\u003e引用\u003c/p\u003e","tags":[]}
{"_id":{"$oid":"5a1f8116522dfe5ca6448fd4"},"question":"比较 \u003e \u003c ==","dscription":"\u003cp\u003e\u003cstrong\u003e下面的对比结果，为什么\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003evar a = 42;\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003evar b = \"foo\";\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea \u0026lt; b;\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea \u0026gt; b;\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea == b;\u0009\u003c/strong\u003e\u003c/p\u003e","answer":"\u003cp\u003ea \u0026lt; b;\u0009\u0009// false\u003c/p\u003e\u003cp\u003ea \u0026gt; b;\u0009\u0009// false\u003c/p\u003e\u003cp\u003ea == b;\u0009\u0009// false\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eB 转换为数字是 NaN，NaN代表一个即不大于也不小于任何值的特殊值\u003c/p\u003e","tags":["javascript"],"description":"\u003cp\u003e\u003cstrong\u003e下面的对比结果，为什么\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003evar a = 42;\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003evar b = \"foo\";\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea \u0026lt; b;\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea \u0026gt; b;\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea == b;\u0009\u0009\u003c/strong\u003e\u003c/p\u003e"}
{"_id":{"$oid":"5a1f81d9522dfe5ca6448fd5"},"question":"（Hoisting）变量声明提升是什么？","dscription":"","answer":"\u003cp\u003evar 声明的变量在作用域所有的地方都可见，var 声明会挪到作用域最顶部\u003c/p\u003e","tags":[]}
{"_id":{"$oid":"5a1f8205522dfe5ca6448fd6"},"question":"变量提升","dscription":"","answer":"\u003cp\u003evar a = 2;\u003c/p\u003e\u003cp\u003efoo();\u0009\u0009\u0009\u0009\u0009// works because `foo()`\u003c/p\u003e\u003cp\u003e\u0009\u0009\u0009\u0009\u0009\u0009// declaration is \"hoisted\"\u003c/p\u003e\u003cp\u003efunction foo() {\u003c/p\u003e\u003cp\u003e\u0009a = 3;\u003c/p\u003e\u003cp\u003e\u0009console.log( a );\u0009// 3\u003c/p\u003e\u003cp\u003e\u0009var a;\u0009\u0009\u0009\u0009// declaration is \"hoisted\"\u003c/p\u003e\u003cp\u003e\u0009\u0009\u0009\u0009\u0009\u0009// to the top of `foo()`\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003econsole.log( a );\u0009// 2\u003c/p\u003e","tags":[],"description":"\u003cp\u003e\u003cstrong\u003e下列代码中 console 打印出？\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003evar a = 2;\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003efoo();\u0009\u0009\u0009\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003efunction foo() {\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u0009a = 3;\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u0009console.log( a );\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u0009var a;\u0009\u0009\u0009\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e}\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003econsole.log( a );\u003c/strong\u003e\u003c/p\u003e"}
{"_id":{"$oid":"5a1f8220522dfe5ca6448fd7"},"question":"变量提升 （2）","dscription":"","answer":"\u003cp\u003efunction foo() {\u003c/p\u003e\u003cp\u003ea = 1;\u0009// `a` not formally declared\u003c/p\u003e\u003cp\u003e}\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003efoo();\u003c/p\u003e\u003cp\u003ea; // 1 -- oops, auto global variable :(\u003c/p\u003e","tags":[],"description":"\u003cp\u003e\u003cstrong\u003e下面最后a 打印出？\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003efunction foo() {\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e\u0009a = 1;\u0009\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003e}\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003efoo();\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea;\u0009\u003c/strong\u003e\u003c/p\u003e"}
{"_id":{"$oid":"5a1f8266522dfe5ca6448fd8"},"question":"ES6 let 的作用是？","dscription":"","answer":"\u003cp\u003eLet 声明的变量只会作用在块级作用域{}里，不会被声明提升（Hoisting）到外部\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eif(){}else { let}  \u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eelse 里声明的let 不会提升到else 外部\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f827b522dfe5ca6448fd9"},"question":"“use strict” 是什么？它对变量声明的影响？","dscription":"","answer":"\u003cp\u003e严格模式\u003c/p\u003e\u003cp\u003e不允许无var的全局变量创建\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f828e522dfe5ca6448fda"},"question":"对象的用处？","dscription":"","answer":"\u003cp\u003e用于汇集和管理数据\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f829d522dfe5ca6448fdb"},"question":"如何在符值时定义默认值？","dscription":"","answer":"\u003cp\u003e使用 || 元算符 （ var data = result[“name”] || “default name” )\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f82ab522dfe5ca6448fdc"},"question":"a.b.c 中， b 是undefined， 会报错，如何预防错误，又能得到值?","dscription":"","answer":"\u003cp\u003e使用 \u0026amp;\u0026amp;， a.b \u0026amp;\u0026amp; a.b.c\u0026nbsp;\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f82e3522dfe5ca6448fdd"},"question":"声明","dscription":"","answer":"\u003cp\u003e1 中每个变量维护（引用）单独的对象，2中的所有变量维护（引用）相同的对象\u003c/p\u003e","tags":[],"description":"\u003cp\u003e\u003cstrong\u003evar a = {}\u003c/strong\u003e,\u003cstrong\u003e b = {}\u003c/strong\u003e,\u003cstrong\u003e c = {}\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003eVar a = b = c = {}\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e这\u003cstrong\u003e2\u003c/strong\u003e行表达式的区别？\u003c/p\u003e"}
{"_id":{"$oid":"5a1f83a2522dfe5ca6448fde"},"question":"创建一个使用原对象作为其原型的新对象的代码？","dscription":"","answer":"\u003cpre class=\"ql-syntax\" spellcheck=\"false\"\u003eObject.create = function(o) {\n\u0026nbsp;\u0026nbsp;var F = function() {};\n\u0026nbsp;\u0026nbsp;\u0026nbsp;F.prototype = o;\n\u0026nbsp;\u0026nbsp;\u0026nbsp;return new F();\n }\n\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\u003cp\u003eMDN 文档 Polyfill\u003c/p\u003e\u003cpre class=\"ql-syntax\" spellcheck=\"false\"\u003eif (typeof Object.create !== \"function\") {\n    Object.create = function (proto, propertiesObject) {\n        if (typeof proto !== 'object' \u0026amp;\u0026amp; typeof proto !== 'function') {\n            throw new TypeError('Object prototype may only be an Object: ' + proto);\n        } else if (proto === null) {\n            throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n        }\n\n        if (typeof propertiesObject != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n\n        function F() {}\n        F.prototype = proto;\n\n        return new F();\n    };\n}\n\n\n\u003c/pre\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f83bf522dfe5ca6448fdf"},"question":"什么是反射机制？","dscription":"","answer":"\u003cp\u003e反射机制指的是程序在运行时能够获取自身的信息。例如一个对象能够在运行时知道自己有哪些方法和属性。\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f83d0522dfe5ca6448fe0"},"question":"反射机制实现代码？","dscription":"","answer":"\u003cpre class=\"ql-syntax\" spellcheck=\"false\"\u003efor(var p in obj){\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;if(typeof(obj[p]==\"function\"){\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;// do something with obj[p]();\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;}else{\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;// do something with obj[p]\n\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;}\n}\n\n\u003c/pre\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f83e2522dfe5ca6448fe1"},"question":"枚举是什么？","dscription":"","answer":"\u003cp\u003e使用 for…in 等遍历对象属性\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f841d522dfe5ca6448fe2"},"question":"枚举一个对象属性，返回除了函数的所有独有属性名?","dscription":"","answer":"\u003cpre class=\"ql-syntax\" spellcheck=\"false\"\u003evar nameArr = []\nfor(key in SomeObject) {\u0009\n  if (SomeObject.hasOwnProperty(‘key’) \u0026amp;\u0026amp; typeof SomObject[‘key’] !== ‘function’) {\u0009\n\u0009 nameArr.push(key) \u0026nbsp; \u0026nbsp; \u0026nbsp; \n  }\n}\n\nreturn nameArr;\n\u003c/pre\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f8447522dfe5ca6448fe3"},"question":"For…in 无法顺序地循环对象属性，如何顺序打印?","dscription":"","answer":"\u003cp\u003e使用for循环, 并事先定义有顺序的属性名数组\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f8453522dfe5ca6448fe4"},"question":"如何删除对象属性？","dscription":"","answer":"\u003cp\u003edelete aObject.name\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f847f522dfe5ca6448fe5"},"question":"下列代码打印什么？","dscription":"","answer":"\u003cp\u003e答案：1，3\u003c/p\u003e","tags":[],"description":"\u003cp\u003e\u003cstrong\u003eVar a = { n: 1, m:2 }\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003ea.__proto__.n = 3\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003econsole.log(a.n)\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003edelete a.n\u003c/strong\u003e\u003c/p\u003e\u003cp\u003e\u003cstrong\u003econsole.log(a.n)\u003c/strong\u003e\u003c/p\u003e"}
{"_id":{"$oid":"5a1f8494522dfe5ca6448fe6"},"question":"如何判断一个属性是对象独有的，而不是来自原型链？","dscription":"","answer":"\u003cp\u003ehasOwnProperty\u003c/p\u003e\u003cp\u003e例：Studen.hasOwnProperty(“name”)\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f84a4522dfe5ca6448fe7"},"question":"函数是一个对象？","dscription":"","answer":"\u003cp\u003e对\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f84ad522dfe5ca6448fe8"},"question":"每个函数创建的时候会附加两个隐藏属性？","dscription":"","answer":"\u003cp\u003e函数的上下文和实现函数行为的代码\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f84b9522dfe5ca6448fe9"},"question":"在一个函数里调用一个函数，在执行时会发生什么？","dscription":"","answer":"\u003cp\u003e暂停当前函数执行，传递控制权和参数给新函数\u003c/p\u003e","tags":[],"description":""}
{"_id":{"$oid":"5a1f84d6522dfe5ca6448fea"},"question":"除了声明时定义的形式参数，每个函数还接受哪些参数？","dscription":"","answer":"\u003cp\u003ethis 和 arguments\u003c/p\u003e","tags":[],"description":""}
